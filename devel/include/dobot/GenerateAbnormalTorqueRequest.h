// Generated by gencpp from file dobot/GenerateAbnormalTorqueRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_MESSAGE_GENERATEABNORMALTORQUEREQUEST_H
#define DOBOT_MESSAGE_GENERATEABNORMALTORQUEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot
{
template <class ContainerAllocator>
struct GenerateAbnormalTorqueRequest_
{
  typedef GenerateAbnormalTorqueRequest_<ContainerAllocator> Type;

  GenerateAbnormalTorqueRequest_()
    : isEnabled(false)
    , index(0)
    , type()
    , param1(0.0)
    , param2(0.0)
    , holdTime(0.0)  {
    }
  GenerateAbnormalTorqueRequest_(const ContainerAllocator& _alloc)
    : isEnabled(false)
    , index(0)
    , type(_alloc)
    , param1(0.0)
    , param2(0.0)
    , holdTime(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _isEnabled_type;
  _isEnabled_type isEnabled;

   typedef int8_t _index_type;
  _index_type index;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef float _param1_type;
  _param1_type param1;

   typedef float _param2_type;
  _param2_type param2;

   typedef float _holdTime_type;
  _holdTime_type holdTime;





  typedef boost::shared_ptr< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateAbnormalTorqueRequest_

typedef ::dobot::GenerateAbnormalTorqueRequest_<std::allocator<void> > GenerateAbnormalTorqueRequest;

typedef boost::shared_ptr< ::dobot::GenerateAbnormalTorqueRequest > GenerateAbnormalTorqueRequestPtr;
typedef boost::shared_ptr< ::dobot::GenerateAbnormalTorqueRequest const> GenerateAbnormalTorqueRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dobot': ['/home/cangorur/Workspace/chariot/conveyor_simulation_guthub/src/dobot/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd1d1dfab5f38fb34df715dfcf122c5d";
  }

  static const char* value(const ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd1d1dfab5f38fb3ULL;
  static const uint64_t static_value2 = 0x4df715dfcf122c5dULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot/GenerateAbnormalTorqueRequest";
  }

  static const char* value(const ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isEnabled\n\
int8 index\n\
string type\n\
float32 param1\n\
float32 param2\n\
float32 holdTime\n\
";
  }

  static const char* value(const ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isEnabled);
      stream.next(m.index);
      stream.next(m.type);
      stream.next(m.param1);
      stream.next(m.param2);
      stream.next(m.holdTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateAbnormalTorqueRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot::GenerateAbnormalTorqueRequest_<ContainerAllocator>& v)
  {
    s << indent << "isEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isEnabled);
    s << indent << "index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.index);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "param1: ";
    Printer<float>::stream(s, indent + "  ", v.param1);
    s << indent << "param2: ";
    Printer<float>::stream(s, indent + "  ", v.param2);
    s << indent << "holdTime: ";
    Printer<float>::stream(s, indent + "  ", v.holdTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_MESSAGE_GENERATEABNORMALTORQUEREQUEST_H
