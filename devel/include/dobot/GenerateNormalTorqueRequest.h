// Generated by gencpp from file dobot/GenerateNormalTorqueRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_MESSAGE_GENERATENORMALTORQUEREQUEST_H
#define DOBOT_MESSAGE_GENERATENORMALTORQUEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot
{
template <class ContainerAllocator>
struct GenerateNormalTorqueRequest_
{
  typedef GenerateNormalTorqueRequest_<ContainerAllocator> Type;

  GenerateNormalTorqueRequest_()
    : isEnabled(false)
    , index(0)
    , torque(0.0)  {
    }
  GenerateNormalTorqueRequest_(const ContainerAllocator& _alloc)
    : isEnabled(false)
    , index(0)
    , torque(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _isEnabled_type;
  _isEnabled_type isEnabled;

   typedef int8_t _index_type;
  _index_type index;

   typedef float _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateNormalTorqueRequest_

typedef ::dobot::GenerateNormalTorqueRequest_<std::allocator<void> > GenerateNormalTorqueRequest;

typedef boost::shared_ptr< ::dobot::GenerateNormalTorqueRequest > GenerateNormalTorqueRequestPtr;
typedef boost::shared_ptr< ::dobot::GenerateNormalTorqueRequest const> GenerateNormalTorqueRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dobot': ['/home/cangorur/Workspace/chariot/conveyor_simulation_guthub/src/dobot/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9af52b90c0d9f1d32414cf7daf27ee78";
  }

  static const char* value(const ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9af52b90c0d9f1d3ULL;
  static const uint64_t static_value2 = 0x2414cf7daf27ee78ULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot/GenerateNormalTorqueRequest";
  }

  static const char* value(const ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isEnabled\n\
int8 index\n\
float32 torque\n\
";
  }

  static const char* value(const ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isEnabled);
      stream.next(m.index);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateNormalTorqueRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot::GenerateNormalTorqueRequest_<ContainerAllocator>& v)
  {
    s << indent << "isEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isEnabled);
    s << indent << "index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.index);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_MESSAGE_GENERATENORMALTORQUEREQUEST_H
