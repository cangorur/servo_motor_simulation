// Generated by gencpp from file dobot/motor_data.msg
// DO NOT EDIT!


#ifndef DOBOT_MESSAGE_MOTOR_DATA_H
#define DOBOT_MESSAGE_MOTOR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot
{
template <class ContainerAllocator>
struct motor_data_
{
  typedef motor_data_<ContainerAllocator> Type;

  motor_data_()
    : timestamp(0.0)
    , requested_velocity(0.0)
    , velocity(0.0)
    , temperature(0.0)
    , torque(0.0)
    , current(0.0)
    , effective_voltage(0.0)
    , power_in(0.0)
    , acceleration(0.0)  {
    }
  motor_data_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , requested_velocity(0.0)
    , velocity(0.0)
    , temperature(0.0)
    , torque(0.0)
    , current(0.0)
    , effective_voltage(0.0)
    , power_in(0.0)
    , acceleration(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef double _requested_velocity_type;
  _requested_velocity_type requested_velocity;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _temperature_type;
  _temperature_type temperature;

   typedef double _torque_type;
  _torque_type torque;

   typedef double _current_type;
  _current_type current;

   typedef double _effective_voltage_type;
  _effective_voltage_type effective_voltage;

   typedef double _power_in_type;
  _power_in_type power_in;

   typedef double _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::dobot::motor_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot::motor_data_<ContainerAllocator> const> ConstPtr;

}; // struct motor_data_

typedef ::dobot::motor_data_<std::allocator<void> > motor_data;

typedef boost::shared_ptr< ::dobot::motor_data > motor_dataPtr;
typedef boost::shared_ptr< ::dobot::motor_data const> motor_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot::motor_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot::motor_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dobot': ['/home/cangorur/Workspace/chariot/conveyor_simulation_guthub/src/dobot/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dobot::motor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot::motor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::motor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::motor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::motor_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::motor_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot::motor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ace88c459da6eff94928e461d29042b8";
  }

  static const char* value(const ::dobot::motor_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xace88c459da6eff9ULL;
  static const uint64_t static_value2 = 0x4928e461d29042b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot::motor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot/motor_data";
  }

  static const char* value(const ::dobot::motor_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot::motor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n\
float64 requested_velocity\n\
float64 velocity\n\
float64 temperature\n\
float64 torque\n\
float64 current\n\
float64 effective_voltage\n\
float64 power_in\n\
float64 acceleration\n\
";
  }

  static const char* value(const ::dobot::motor_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot::motor_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.requested_velocity);
      stream.next(m.velocity);
      stream.next(m.temperature);
      stream.next(m.torque);
      stream.next(m.current);
      stream.next(m.effective_voltage);
      stream.next(m.power_in);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot::motor_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot::motor_data_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "requested_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.requested_velocity);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "torque: ";
    Printer<double>::stream(s, indent + "  ", v.torque);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
    s << indent << "effective_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.effective_voltage);
    s << indent << "power_in: ";
    Printer<double>::stream(s, indent + "  ", v.power_in);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_MESSAGE_MOTOR_DATA_H
