// Generated by gencpp from file dobot/motor_raw_data.msg
// DO NOT EDIT!


#ifndef DOBOT_MESSAGE_MOTOR_RAW_DATA_H
#define DOBOT_MESSAGE_MOTOR_RAW_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot
{
template <class ContainerAllocator>
struct motor_raw_data_
{
  typedef motor_raw_data_<ContainerAllocator> Type;

  motor_raw_data_()
    : raw_timestamp(0.0)
    , raw_requested_velocity(0.0)
    , raw_velocity(0.0)
    , raw_current(0.0)
    , raw_temperature(0.0)
    , raw_supply_voltage(0.0)
    , raw_pwm(0.0)
    , raw_torque(0.0)
    , raw_acceleration(0.0)  {
    }
  motor_raw_data_(const ContainerAllocator& _alloc)
    : raw_timestamp(0.0)
    , raw_requested_velocity(0.0)
    , raw_velocity(0.0)
    , raw_current(0.0)
    , raw_temperature(0.0)
    , raw_supply_voltage(0.0)
    , raw_pwm(0.0)
    , raw_torque(0.0)
    , raw_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef double _raw_timestamp_type;
  _raw_timestamp_type raw_timestamp;

   typedef double _raw_requested_velocity_type;
  _raw_requested_velocity_type raw_requested_velocity;

   typedef double _raw_velocity_type;
  _raw_velocity_type raw_velocity;

   typedef double _raw_current_type;
  _raw_current_type raw_current;

   typedef double _raw_temperature_type;
  _raw_temperature_type raw_temperature;

   typedef double _raw_supply_voltage_type;
  _raw_supply_voltage_type raw_supply_voltage;

   typedef double _raw_pwm_type;
  _raw_pwm_type raw_pwm;

   typedef double _raw_torque_type;
  _raw_torque_type raw_torque;

   typedef double _raw_acceleration_type;
  _raw_acceleration_type raw_acceleration;





  typedef boost::shared_ptr< ::dobot::motor_raw_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot::motor_raw_data_<ContainerAllocator> const> ConstPtr;

}; // struct motor_raw_data_

typedef ::dobot::motor_raw_data_<std::allocator<void> > motor_raw_data;

typedef boost::shared_ptr< ::dobot::motor_raw_data > motor_raw_dataPtr;
typedef boost::shared_ptr< ::dobot::motor_raw_data const> motor_raw_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot::motor_raw_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot::motor_raw_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dobot': ['/home/cangorur/Workspace/chariot/conveyor_simulation_guthub/src/dobot/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dobot::motor_raw_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot::motor_raw_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::motor_raw_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::motor_raw_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::motor_raw_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::motor_raw_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot::motor_raw_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "584bddd3c7b7f3d0e01f4bcf0da3649c";
  }

  static const char* value(const ::dobot::motor_raw_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x584bddd3c7b7f3d0ULL;
  static const uint64_t static_value2 = 0xe01f4bcf0da3649cULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot::motor_raw_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot/motor_raw_data";
  }

  static const char* value(const ::dobot::motor_raw_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot::motor_raw_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 raw_timestamp\n\
float64 raw_requested_velocity\n\
float64 raw_velocity\n\
float64 raw_current\n\
float64 raw_temperature\n\
float64 raw_supply_voltage\n\
float64 raw_pwm\n\
float64 raw_torque\n\
float64 raw_acceleration\n\
";
  }

  static const char* value(const ::dobot::motor_raw_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot::motor_raw_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.raw_timestamp);
      stream.next(m.raw_requested_velocity);
      stream.next(m.raw_velocity);
      stream.next(m.raw_current);
      stream.next(m.raw_temperature);
      stream.next(m.raw_supply_voltage);
      stream.next(m.raw_pwm);
      stream.next(m.raw_torque);
      stream.next(m.raw_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_raw_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot::motor_raw_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot::motor_raw_data_<ContainerAllocator>& v)
  {
    s << indent << "raw_timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.raw_timestamp);
    s << indent << "raw_requested_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.raw_requested_velocity);
    s << indent << "raw_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.raw_velocity);
    s << indent << "raw_current: ";
    Printer<double>::stream(s, indent + "  ", v.raw_current);
    s << indent << "raw_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.raw_temperature);
    s << indent << "raw_supply_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.raw_supply_voltage);
    s << indent << "raw_pwm: ";
    Printer<double>::stream(s, indent + "  ", v.raw_pwm);
    s << indent << "raw_torque: ";
    Printer<double>::stream(s, indent + "  ", v.raw_torque);
    s << indent << "raw_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.raw_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_MESSAGE_MOTOR_RAW_DATA_H
