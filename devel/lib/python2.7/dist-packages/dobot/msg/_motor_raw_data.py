# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dobot/motor_raw_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motor_raw_data(genpy.Message):
  _md5sum = "584bddd3c7b7f3d0e01f4bcf0da3649c"
  _type = "dobot/motor_raw_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 raw_timestamp
float64 raw_requested_velocity
float64 raw_velocity
float64 raw_current
float64 raw_temperature
float64 raw_supply_voltage
float64 raw_pwm
float64 raw_torque
float64 raw_acceleration
"""
  __slots__ = ['raw_timestamp','raw_requested_velocity','raw_velocity','raw_current','raw_temperature','raw_supply_voltage','raw_pwm','raw_torque','raw_acceleration']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       raw_timestamp,raw_requested_velocity,raw_velocity,raw_current,raw_temperature,raw_supply_voltage,raw_pwm,raw_torque,raw_acceleration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motor_raw_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.raw_timestamp is None:
        self.raw_timestamp = 0.
      if self.raw_requested_velocity is None:
        self.raw_requested_velocity = 0.
      if self.raw_velocity is None:
        self.raw_velocity = 0.
      if self.raw_current is None:
        self.raw_current = 0.
      if self.raw_temperature is None:
        self.raw_temperature = 0.
      if self.raw_supply_voltage is None:
        self.raw_supply_voltage = 0.
      if self.raw_pwm is None:
        self.raw_pwm = 0.
      if self.raw_torque is None:
        self.raw_torque = 0.
      if self.raw_acceleration is None:
        self.raw_acceleration = 0.
    else:
      self.raw_timestamp = 0.
      self.raw_requested_velocity = 0.
      self.raw_velocity = 0.
      self.raw_current = 0.
      self.raw_temperature = 0.
      self.raw_supply_voltage = 0.
      self.raw_pwm = 0.
      self.raw_torque = 0.
      self.raw_acceleration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.raw_timestamp, _x.raw_requested_velocity, _x.raw_velocity, _x.raw_current, _x.raw_temperature, _x.raw_supply_voltage, _x.raw_pwm, _x.raw_torque, _x.raw_acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.raw_timestamp, _x.raw_requested_velocity, _x.raw_velocity, _x.raw_current, _x.raw_temperature, _x.raw_supply_voltage, _x.raw_pwm, _x.raw_torque, _x.raw_acceleration,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.raw_timestamp, _x.raw_requested_velocity, _x.raw_velocity, _x.raw_current, _x.raw_temperature, _x.raw_supply_voltage, _x.raw_pwm, _x.raw_torque, _x.raw_acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.raw_timestamp, _x.raw_requested_velocity, _x.raw_velocity, _x.raw_current, _x.raw_temperature, _x.raw_supply_voltage, _x.raw_pwm, _x.raw_torque, _x.raw_acceleration,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
