classdef motor_data < robotics.ros.Message
    %motor_data MATLAB implementation of dobot/motor_data
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dobot/motor_data' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7b163bb6219053b7a721a14e7f280e53' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Timestamp
        RequestedVelocity
        Velocity
        Temperature
        Torque
        EffectiveVoltage
        PowerIn
        Acceleration
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Acceleration', 'EffectiveVoltage', 'PowerIn', 'RequestedVelocity', 'Temperature', 'Timestamp', 'Torque', 'Velocity'} % List of non-constant message properties
        ROSPropertyList = {'acceleration', 'effective_voltage', 'power_in', 'requested_velocity', 'temperature', 'timestamp', 'torque', 'velocity'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = motor_data(msg)
            %motor_data Construct the message object motor_data
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function timestamp = get.Timestamp(obj)
            %get.Timestamp Get the value for property Timestamp
            timestamp = double(obj.JavaMessage.getTimestamp);
        end
        
        function set.Timestamp(obj, timestamp)
            %set.Timestamp Set the value for property Timestamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'Timestamp');
            
            obj.JavaMessage.setTimestamp(timestamp);
        end
        
        function requestedvelocity = get.RequestedVelocity(obj)
            %get.RequestedVelocity Get the value for property RequestedVelocity
            requestedvelocity = double(obj.JavaMessage.getRequestedVelocity);
        end
        
        function set.RequestedVelocity(obj, requestedvelocity)
            %set.RequestedVelocity Set the value for property RequestedVelocity
            validateattributes(requestedvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'RequestedVelocity');
            
            obj.JavaMessage.setRequestedVelocity(requestedvelocity);
        end
        
        function velocity = get.Velocity(obj)
            %get.Velocity Get the value for property Velocity
            velocity = double(obj.JavaMessage.getVelocity);
        end
        
        function set.Velocity(obj, velocity)
            %set.Velocity Set the value for property Velocity
            validateattributes(velocity, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'Velocity');
            
            obj.JavaMessage.setVelocity(velocity);
        end
        
        function temperature = get.Temperature(obj)
            %get.Temperature Get the value for property Temperature
            temperature = double(obj.JavaMessage.getTemperature);
        end
        
        function set.Temperature(obj, temperature)
            %set.Temperature Set the value for property Temperature
            validateattributes(temperature, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'Temperature');
            
            obj.JavaMessage.setTemperature(temperature);
        end
        
        function torque = get.Torque(obj)
            %get.Torque Get the value for property Torque
            torque = double(obj.JavaMessage.getTorque);
        end
        
        function set.Torque(obj, torque)
            %set.Torque Set the value for property Torque
            validateattributes(torque, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'Torque');
            
            obj.JavaMessage.setTorque(torque);
        end
        
        function effectivevoltage = get.EffectiveVoltage(obj)
            %get.EffectiveVoltage Get the value for property EffectiveVoltage
            effectivevoltage = double(obj.JavaMessage.getEffectiveVoltage);
        end
        
        function set.EffectiveVoltage(obj, effectivevoltage)
            %set.EffectiveVoltage Set the value for property EffectiveVoltage
            validateattributes(effectivevoltage, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'EffectiveVoltage');
            
            obj.JavaMessage.setEffectiveVoltage(effectivevoltage);
        end
        
        function powerin = get.PowerIn(obj)
            %get.PowerIn Get the value for property PowerIn
            powerin = double(obj.JavaMessage.getPowerIn);
        end
        
        function set.PowerIn(obj, powerin)
            %set.PowerIn Set the value for property PowerIn
            validateattributes(powerin, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'PowerIn');
            
            obj.JavaMessage.setPowerIn(powerin);
        end
        
        function acceleration = get.Acceleration(obj)
            %get.Acceleration Get the value for property Acceleration
            acceleration = double(obj.JavaMessage.getAcceleration);
        end
        
        function set.Acceleration(obj, acceleration)
            %set.Acceleration Set the value for property Acceleration
            validateattributes(acceleration, {'numeric'}, {'nonempty', 'scalar'}, 'motor_data', 'Acceleration');
            
            obj.JavaMessage.setAcceleration(acceleration);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Timestamp = obj.Timestamp;
            cpObj.RequestedVelocity = obj.RequestedVelocity;
            cpObj.Velocity = obj.Velocity;
            cpObj.Temperature = obj.Temperature;
            cpObj.Torque = obj.Torque;
            cpObj.EffectiveVoltage = obj.EffectiveVoltage;
            cpObj.PowerIn = obj.PowerIn;
            cpObj.Acceleration = obj.Acceleration;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Timestamp = strObj.Timestamp;
            obj.RequestedVelocity = strObj.RequestedVelocity;
            obj.Velocity = strObj.Velocity;
            obj.Temperature = strObj.Temperature;
            obj.Torque = strObj.Torque;
            obj.EffectiveVoltage = strObj.EffectiveVoltage;
            obj.PowerIn = strObj.PowerIn;
            obj.Acceleration = strObj.Acceleration;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Timestamp = obj.Timestamp;
            strObj.RequestedVelocity = obj.RequestedVelocity;
            strObj.Velocity = obj.Velocity;
            strObj.Temperature = obj.Temperature;
            strObj.Torque = obj.Torque;
            strObj.EffectiveVoltage = obj.EffectiveVoltage;
            strObj.PowerIn = obj.PowerIn;
            strObj.Acceleration = obj.Acceleration;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dobot.motor_data.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dobot.motor_data;
            obj.reload(strObj);
        end
    end
end
