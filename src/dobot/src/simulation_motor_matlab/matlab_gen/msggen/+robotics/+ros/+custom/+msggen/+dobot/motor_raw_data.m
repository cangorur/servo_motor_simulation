classdef motor_raw_data < robotics.ros.Message
    %motor_raw_data MATLAB implementation of dobot/motor_raw_data
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dobot/motor_raw_data' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '584bddd3c7b7f3d0e01f4bcf0da3649c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        RawTimestamp
        RawRequestedVelocity
        RawVelocity
        RawCurrent
        RawTemperature
        RawSupplyVoltage
        RawPwm
        RawTorque
        RawAcceleration
    end
    
    properties (Constant, Hidden)
        PropertyList = {'RawAcceleration', 'RawCurrent', 'RawPwm', 'RawRequestedVelocity', 'RawSupplyVoltage', 'RawTemperature', 'RawTimestamp', 'RawTorque', 'RawVelocity'} % List of non-constant message properties
        ROSPropertyList = {'raw_acceleration', 'raw_current', 'raw_pwm', 'raw_requested_velocity', 'raw_supply_voltage', 'raw_temperature', 'raw_timestamp', 'raw_torque', 'raw_velocity'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = motor_raw_data(msg)
            %motor_raw_data Construct the message object motor_raw_data
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function rawtimestamp = get.RawTimestamp(obj)
            %get.RawTimestamp Get the value for property RawTimestamp
            rawtimestamp = double(obj.JavaMessage.getRawTimestamp);
        end
        
        function set.RawTimestamp(obj, rawtimestamp)
            %set.RawTimestamp Set the value for property RawTimestamp
            validateattributes(rawtimestamp, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawTimestamp');
            
            obj.JavaMessage.setRawTimestamp(rawtimestamp);
        end
        
        function rawrequestedvelocity = get.RawRequestedVelocity(obj)
            %get.RawRequestedVelocity Get the value for property RawRequestedVelocity
            rawrequestedvelocity = double(obj.JavaMessage.getRawRequestedVelocity);
        end
        
        function set.RawRequestedVelocity(obj, rawrequestedvelocity)
            %set.RawRequestedVelocity Set the value for property RawRequestedVelocity
            validateattributes(rawrequestedvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawRequestedVelocity');
            
            obj.JavaMessage.setRawRequestedVelocity(rawrequestedvelocity);
        end
        
        function rawvelocity = get.RawVelocity(obj)
            %get.RawVelocity Get the value for property RawVelocity
            rawvelocity = double(obj.JavaMessage.getRawVelocity);
        end
        
        function set.RawVelocity(obj, rawvelocity)
            %set.RawVelocity Set the value for property RawVelocity
            validateattributes(rawvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawVelocity');
            
            obj.JavaMessage.setRawVelocity(rawvelocity);
        end
        
        function rawcurrent = get.RawCurrent(obj)
            %get.RawCurrent Get the value for property RawCurrent
            rawcurrent = double(obj.JavaMessage.getRawCurrent);
        end
        
        function set.RawCurrent(obj, rawcurrent)
            %set.RawCurrent Set the value for property RawCurrent
            validateattributes(rawcurrent, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawCurrent');
            
            obj.JavaMessage.setRawCurrent(rawcurrent);
        end
        
        function rawtemperature = get.RawTemperature(obj)
            %get.RawTemperature Get the value for property RawTemperature
            rawtemperature = double(obj.JavaMessage.getRawTemperature);
        end
        
        function set.RawTemperature(obj, rawtemperature)
            %set.RawTemperature Set the value for property RawTemperature
            validateattributes(rawtemperature, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawTemperature');
            
            obj.JavaMessage.setRawTemperature(rawtemperature);
        end
        
        function rawsupplyvoltage = get.RawSupplyVoltage(obj)
            %get.RawSupplyVoltage Get the value for property RawSupplyVoltage
            rawsupplyvoltage = double(obj.JavaMessage.getRawSupplyVoltage);
        end
        
        function set.RawSupplyVoltage(obj, rawsupplyvoltage)
            %set.RawSupplyVoltage Set the value for property RawSupplyVoltage
            validateattributes(rawsupplyvoltage, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawSupplyVoltage');
            
            obj.JavaMessage.setRawSupplyVoltage(rawsupplyvoltage);
        end
        
        function rawpwm = get.RawPwm(obj)
            %get.RawPwm Get the value for property RawPwm
            rawpwm = double(obj.JavaMessage.getRawPwm);
        end
        
        function set.RawPwm(obj, rawpwm)
            %set.RawPwm Set the value for property RawPwm
            validateattributes(rawpwm, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawPwm');
            
            obj.JavaMessage.setRawPwm(rawpwm);
        end
        
        function rawtorque = get.RawTorque(obj)
            %get.RawTorque Get the value for property RawTorque
            rawtorque = double(obj.JavaMessage.getRawTorque);
        end
        
        function set.RawTorque(obj, rawtorque)
            %set.RawTorque Set the value for property RawTorque
            validateattributes(rawtorque, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawTorque');
            
            obj.JavaMessage.setRawTorque(rawtorque);
        end
        
        function rawacceleration = get.RawAcceleration(obj)
            %get.RawAcceleration Get the value for property RawAcceleration
            rawacceleration = double(obj.JavaMessage.getRawAcceleration);
        end
        
        function set.RawAcceleration(obj, rawacceleration)
            %set.RawAcceleration Set the value for property RawAcceleration
            validateattributes(rawacceleration, {'numeric'}, {'nonempty', 'scalar'}, 'motor_raw_data', 'RawAcceleration');
            
            obj.JavaMessage.setRawAcceleration(rawacceleration);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.RawTimestamp = obj.RawTimestamp;
            cpObj.RawRequestedVelocity = obj.RawRequestedVelocity;
            cpObj.RawVelocity = obj.RawVelocity;
            cpObj.RawCurrent = obj.RawCurrent;
            cpObj.RawTemperature = obj.RawTemperature;
            cpObj.RawSupplyVoltage = obj.RawSupplyVoltage;
            cpObj.RawPwm = obj.RawPwm;
            cpObj.RawTorque = obj.RawTorque;
            cpObj.RawAcceleration = obj.RawAcceleration;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RawTimestamp = strObj.RawTimestamp;
            obj.RawRequestedVelocity = strObj.RawRequestedVelocity;
            obj.RawVelocity = strObj.RawVelocity;
            obj.RawCurrent = strObj.RawCurrent;
            obj.RawTemperature = strObj.RawTemperature;
            obj.RawSupplyVoltage = strObj.RawSupplyVoltage;
            obj.RawPwm = strObj.RawPwm;
            obj.RawTorque = strObj.RawTorque;
            obj.RawAcceleration = strObj.RawAcceleration;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RawTimestamp = obj.RawTimestamp;
            strObj.RawRequestedVelocity = obj.RawRequestedVelocity;
            strObj.RawVelocity = obj.RawVelocity;
            strObj.RawCurrent = obj.RawCurrent;
            strObj.RawTemperature = obj.RawTemperature;
            strObj.RawSupplyVoltage = obj.RawSupplyVoltage;
            strObj.RawPwm = obj.RawPwm;
            strObj.RawTorque = obj.RawTorque;
            strObj.RawAcceleration = obj.RawAcceleration;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dobot.motor_raw_data.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dobot.motor_raw_data;
            obj.reload(strObj);
        end
    end
end
